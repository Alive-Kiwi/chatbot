{"version":3,"sources":["components/Header.js","components/pages/Landing.js","components/pages/About.js","components/shop/ItemList.js","components/shop/Shop.js","components/chatbot/Message.js","components/chatbot/Card.js","components/chatbot/QuickReply.js","components/chatbot/QuickReplies.js","components/chatbot/Chatbot.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","to","id","Landing","style","textAlign","About","ItemList","Shop","Message","props","speaks","text","Card","float","paddingRight","width","alt","payload","fields","header","stringValue","src","image","description","price","target","href","link","QuickReply","reply","structValue","margin","onClick","click","QuickReplies","_handleClick","bind","this","replyClick","i","key","quickReplies","map","renderQuickReply","renderQuickReplies","Component","cookies","Cookies","Chatbot","_handleInputKeyPress","_handleQuickReplyPayload","state","messages","undefined","get","set","uuid","path","queryText","says","msg","setState","axios","post","userID","res","data","fulfillmentMessages","eventName","event","df_event_query","messagesEnd","scrollIntoView","behaviour","df_text_query","cards","card","message","overflow","overflowY","height","listValue","values","length","renderCards","quick_replies","stateMessages","renderOneMessage","e","value","position","bottom","right","border","renderMessages","ref","el","clear","paddingLeft","placeholder","type","onKeyPress","App","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af60e7fc.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nconst Header = () => {\n  return (\n    <nav>\n      <div className=\"nav-wrapper\">\n        <Link to={'/'} className=\"brand-logo\">\n          Kloc Technologies\n        </Link>\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n          {' '}\n          <li>\n            <Link to={'/shop'}>Services</Link>\n          </li>\n          <li>\n            <Link to={'/about'}>About Us</Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Landing = () => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h1>Sample Website</h1>\n    </div>\n  );\n};\n\nexport default Landing;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <div>\n      <h1>About Us!</h1>\n    </div>\n  );\n};\n\nexport default About;\n","import React from 'react';\n\nconst ItemList = () => {\n  return <div>Here goes a list of items </div>;\n};\n\nexport default ItemList;\n","import React from 'react';\nimport ItemList from './ItemList';\n\nconst Shop = () => {\n  return (\n    <div>\n      <h2>Services!</h2>\n      <ItemList></ItemList>\n    </div>\n  );\n};\n\nexport default Shop;\n","import React from 'react';\n\nconst Message = props => {\n  return (\n    <div className=\"col s12 m8 offset-m2 l6 offset-l3\">\n      <div className=\"card-panel grey lighten-5 z-depth-1\">\n        <div className=\"row valign-wrapper\">\n          {props.speaks === 'bot' && (\n            <div className=\"col s2\">\n              <a className=\"btn-floating btn-large waves-effect waves-light red\">\n                {props.speaks}\n              </a>\n            </div>\n          )}\n          <div className=\"col s10\">\n            <span className=\"black-text\">{props.text}</span>\n          </div>\n          {props.speaks === 'me' && (\n            <div className=\"col s2\">\n              <a className=\"btn-floating btn-large waves-effect waves-light red\">\n                {props.speaks}\n              </a>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Message;\n","import React from 'react';\n\nconst Card = props => {\n  return (\n    <div style={{ float: 'left', paddingRight: 30, width: 270 }}>\n      <div className=\"card\">\n        <div className=\"card-image\" style={{ width: 240 }}>\n          <img\n            alt={props.payload.fields.header.stringValue}\n            src={props.payload.fields.image.stringValue}\n          />\n          <span className=\"card-title\">\n            {props.payload.fields.header.stringValue}\n          </span>\n        </div>\n        <div className=\"card-content\">\n          {props.payload.fields.description.stringValue}\n          <p>\n            <a>{props.payload.fields.price.stringValue}</a>\n          </p>\n        </div>\n        <div className=\"card-action\">\n          <a target=\"_blank\" href={props.payload.fields.link.stringValue}>\n            GET NOW\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nconst QuickReply = props => {\n  if (props.reply.structValue.fields.payload) {\n    return (\n      <a\n        style={{ margin: 3 }}\n        className=\"btn-floating btn-large waves-effect waves-light red\"\n        onClick={() =>\n          props.click(\n            props.reply.structValue.fields.payload.stringValue,\n            props.reply.structValue.fields.text.stringValue\n          )\n        }\n      >\n        {props.reply.structValue.fields.text.stringValue}\n      </a>\n    );\n  } else {\n    return (\n      <a\n        className=\"btn-floating btn-large waves-effect waves-light red\"\n        href={props.reply.structValue.fields.link.stringValue}\n      >\n        {props.reply.structValue.fields.text.stringValue}\n      </a>\n    );\n  }\n};\n\nexport default QuickReply;\n","import React, { Component } from 'react';\nimport QuickReply from './QuickReply';\nclass QuickReplies extends Component {\n  constructor(props) {\n    super(props);\n    this._handleClick = this._handleClick.bind(this);\n  }\n\n  _handleClick(payload, text) {\n    this.props.replyClick(payload, text);\n  }\n\n  renderQuickReply(reply, i) {\n    return <QuickReply key={i} click={this._handleClick} reply={reply} />;\n  }\n\n  renderQuickReplies(quickReplies) {\n    if (quickReplies) {\n      return quickReplies.map((reply, i) => {\n        return this.renderQuickReply(reply, i);\n      });\n    } else {\n      return null;\n    }\n  }\n  render() {\n    return (\n      <div className=\"col s12 m8 offset-m2 l6 offset-l3\">\n        <div className=\"card-panel grey lighten-5 z-depth-1\">\n          <div className=\"row valign-wrapper\">\n            <div className=\"col s2\">\n              <a className=\"btn-floating btn-large waves-effect waves-light red\">\n                {this.props.speaks}\n              </a>\n            </div>\n            <div id=\"quick-replies\" className=\"col s10\">\n              {this.props.text && <p>{this.props.text.stringValue}</p>}\n              {this.renderQuickReplies(this.props.payload)}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default QuickReplies;\n","import React, { Component } from 'react';\nimport axios from 'axios/index';\nimport Message from './Message';\nimport Card from './Card';\nimport Cookies from 'universal-cookie';\nimport { v4 as uuid } from 'uuid';\nimport QuickReplies from './QuickReplies';\nconst cookies = new Cookies();\n\nclass Chatbot extends Component {\n  messagesEnd;\n  constructor(props) {\n    super(props);\n\n    this._handleInputKeyPress = this._handleInputKeyPress.bind(this);\n    this._handleQuickReplyPayload = this._handleQuickReplyPayload.bind(this);\n    this.state = {\n      messages: []\n    };\n\n    if (cookies.get('userID') === undefined) {\n      cookies.set('userID', uuid(), { path: '/' });\n    }\n  }\n\n  async df_text_query(queryText) {\n    let says = {\n      speaks: 'me',\n      msg: {\n        text: {\n          text: queryText\n        }\n      }\n    };\n    this.setState({ messages: [...this.state.messages, says] });\n    const res = await axios.post('/api/df_text_query', {\n      text: queryText,\n      userID: cookies.get('userID')\n    });\n\n    for (let msg of res.data.fulfillmentMessages) {\n      says = {\n        speaks: 'bot',\n        msg: msg\n      };\n      this.setState({ messages: [...this.state.messages, says] });\n    }\n  }\n\n  async df_event_query(eventName) {\n    const res = await axios.post('/api/df_event_query', {\n      event: eventName,\n      userID: cookies.get('userID')\n    });\n\n    for (let msg of res.data.fulfillmentMessages) {\n      let says = {\n        speaks: 'bot',\n        msg: msg\n      };\n      this.setState({ messages: [...this.state.messages, says] });\n    }\n  }\n\n  componentDidMount() {\n    this.df_event_query('Welcome');\n  }\n\n  componentDidUpdate() {\n    this.messagesEnd.scrollIntoView({ behaviour: 'smooth' });\n  }\n\n  _handleQuickReplyPayload(payload, text) {\n    this.df_text_query(text);\n  }\n\n  renderCards(cards) {\n    return cards.map((card, i) => {\n      return <Card key={i} payload={card.structValue} />;\n    });\n  }\n\n  renderOneMessage(message, i) {\n    if (message.msg && message.msg.text && message.msg.text.text) {\n      return (\n        <Message key={i} speaks={message.speaks} text={message.msg.text.text} />\n      );\n    } else if (\n      message.msg &&\n      message.msg.payload &&\n      message.msg.payload.fields &&\n      message.msg.payload.fields.cards\n    ) {\n      return (\n        <div key={i}>\n          <div className=\"card-panel grey lighten-5 z-depth-1\">\n            <div style={{ overflow: 'hidden' }}>\n              <div className=\"col s2\">\n                <a className=\"btn-floating btn-large waves-effect waves-light red\">\n                  {message.speaks}\n                </a>\n                <div style={{ overflow: 'auto', overflowY: 'scroll' }}>\n                  <div\n                    style={{\n                      height: 300,\n                      width:\n                        message.msg.payload.fields.cards.listValue.values\n                          .length * 270\n                    }}\n                  >\n                    {this.renderCards(\n                      message.msg.payload.fields.cards.listValue.values\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    } else if (\n      message.msg &&\n      message.msg.payload &&\n      message.msg.payload.fields &&\n      message.msg.payload.fields.quick_replies\n    ) {\n      return (\n        <QuickReplies\n          text={\n            message.msg.payload.fields.text\n              ? message.msg.payload.fields.text\n              : null\n          }\n          key={i}\n          replyClick={this._handleQuickReplyPayload}\n          speaks={message.speaks}\n          payload={message.msg.payload.fields.quick_replies.listValue.values}\n        />\n      );\n    }\n  }\n\n  renderMessages(stateMessages) {\n    if (stateMessages) {\n      return stateMessages.map((message, i) => {\n        return this.renderOneMessage(message, i);\n      });\n    } else {\n      return null;\n    }\n  }\n\n  _handleInputKeyPress(e) {\n    if (e.key === 'Enter') {\n      this.df_text_query(e.target.value);\n      e.target.value = '';\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          height: 500,\n          width: 400,\n          position: 'absolute',\n          bottom: 0,\n          right: 0,\n          border: '1px solid lightgrey'\n        }}\n      >\n        <nav>\n          <div className=\"nav-wrapper\">\n            <a className=\"brand-logo\">Chatbot</a>\n          </div>\n        </nav>\n        <div\n          id=\"chatbot\"\n          style={{ height: 388, width: '100%', overflow: 'auto' }}\n        >\n          {this.renderMessages(this.state.messages)}\n          <div\n            ref={el => {\n              this.messagesEnd = el;\n            }}\n            style={{ float: 'left', clear: 'both' }}\n          ></div>\n        </div>\n        <div className=\"col s12\">\n          <input\n            style={{\n              margin: 0,\n              paddingLeft: '1%',\n              paddingRight: '1%',\n              width: '98%'\n            }}\n            placeholder=\"Enter a message...\"\n            type=\"text\"\n            onKeyPress={this._handleInputKeyPress}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Chatbot;\n","import React from 'react';\n\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport Header from './Header';\nimport Landing from './pages/Landing';\nimport About from './pages/About';\nimport Shop from './shop/Shop';\nimport Chatbot from './chatbot/Chatbot';\n\nconst App = () => {\n  return (\n    <div className=\"container\">\n      <BrowserRouter>\n        <div>\n          <Header />\n          <Route exact path=\"/\" component={Landing} />\n          <Route exact path=\"/about\" component={About} />\n          <Route exact path=\"/shop\" component={Shop} />\n          <Chatbot></Chatbot>\n        </div>\n      </BrowserRouter>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'materialize-css/dist/css/materialize.min.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}